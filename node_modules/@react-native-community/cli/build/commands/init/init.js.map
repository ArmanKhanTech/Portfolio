{"version":3,"names":["DEFAULT_VERSION","doesDirectoryExist","dir","fs","existsSync","setProjectDirectory","directory","DirectoryAlreadyExistsError","mkdirSync","recursive","process","chdir","error","CLIError","cwd","getTemplateName","name","Object","keys","JSON","parse","readFileSync","path","join","dependencies","setEmptyHashForCachedDependencies","projectName","cacheManager","set","createHash","update","digest","createFromTemplate","templateUri","npm","pm","projectTitle","skipInstall","packageName","installCocoaPods","logger","debug","log","banner","packageManager","userAgentPM","userAgentPackageManager","warn","projectDirectory","loader","getLoader","text","templateSourceDir","mkdtempSync","os","tmpdir","start","installTemplatePackage","succeed","templateName","templateConfig","getTemplateConfig","copyTemplate","templateDir","changePlaceholderInTemplate","placeholderName","placeholderTitle","titlePlaceholder","createDefaultConfigFile","postInitScript","info","executePostInitScript","installDependencies","root","platform","installPodsValue","String","installPods","installCocoapods","prompt","type","message","chalk","reset","dim","e","fail","removeSync","PackageManager","installAll","silent","checkPackageManagerAvailability","getBunVersionIfAvailable","getNpmVersionIfAvailable","getYarnVersionIfAvailable","createTemplateUri","options","version","isTypescriptTemplate","template","platformName","sanitizeConfigFile","fileContent","replace","cliConfigContent","project","ios","automaticPodsInstallation","configFileContent","stringify","filepath","writeFileSync","encoding","existingConfigFile","require","mergedConfig","deepmerge","output","bold","createProject","title","userAgent","env","npm_config_user_agent","startsWith","initialize","projName","validateProjectName","TemplateAndVersionError","directoryName","relative","projectFolder","createGitRepository","printRunInstructions"],"sources":["../../../src/commands/init/init.ts"],"sourcesContent":["import os from 'os';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport {validateProjectName} from './validate';\nimport chalk from 'chalk';\nimport DirectoryAlreadyExistsError from './errors/DirectoryAlreadyExistsError';\nimport printRunInstructions from './printRunInstructions';\nimport {\n  CLIError,\n  logger,\n  getLoader,\n  Loader,\n  cacheManager,\n  prompt,\n} from '@react-native-community/cli-tools';\nimport {installPods} from '@react-native-community/cli-platform-ios';\nimport {\n  installTemplatePackage,\n  getTemplateConfig,\n  copyTemplate,\n  executePostInitScript,\n} from './template';\nimport {changePlaceholderInTemplate} from './editTemplate';\nimport * as PackageManager from '../../tools/packageManager';\nimport banner from './banner';\nimport TemplateAndVersionError from './errors/TemplateAndVersionError';\nimport {getBunVersionIfAvailable} from '../../tools/bun';\nimport {getNpmVersionIfAvailable} from '../../tools/npm';\nimport {getYarnVersionIfAvailable} from '../../tools/yarn';\nimport {createHash} from 'crypto';\nimport createGitRepository from './createGitRepository';\nimport deepmerge from 'deepmerge';\n\nconst DEFAULT_VERSION = 'latest';\n\ntype Options = {\n  template?: string;\n  npm?: boolean;\n  pm?: PackageManager.PackageManager;\n  directory?: string;\n  displayName?: string;\n  title?: string;\n  skipInstall?: boolean;\n  version?: string;\n  packageName?: string;\n  installPods?: string | boolean;\n  platformName?: string;\n};\n\ninterface TemplateOptions {\n  projectName: string;\n  templateUri: string;\n  npm?: boolean;\n  pm?: PackageManager.PackageManager;\n  directory: string;\n  projectTitle?: string;\n  skipInstall?: boolean;\n  packageName?: string;\n  installCocoaPods?: string | boolean;\n}\n\nfunction doesDirectoryExist(dir: string) {\n  return fs.existsSync(dir);\n}\n\nasync function setProjectDirectory(directory: string) {\n  if (doesDirectoryExist(directory)) {\n    throw new DirectoryAlreadyExistsError(directory);\n  }\n\n  try {\n    fs.mkdirSync(directory, {recursive: true});\n    process.chdir(directory);\n  } catch (error) {\n    throw new CLIError(\n      'Error occurred while trying to create project directory.',\n      error as Error,\n    );\n  }\n\n  return process.cwd();\n}\n\nfunction getTemplateName(cwd: string) {\n  // We use package manager to infer the name of the template module for us.\n  // That's why we get it from temporary package.json, where the name is the\n  // first and only dependency (hence 0).\n  const name = Object.keys(\n    JSON.parse(fs.readFileSync(path.join(cwd, './package.json'), 'utf8'))\n      .dependencies,\n  )[0];\n  return name;\n}\n\n//set cache to empty string to prevent installing cocoapods on freshly created project\nfunction setEmptyHashForCachedDependencies(projectName: string) {\n  cacheManager.set(\n    projectName,\n    'dependencies',\n    createHash('md5').update('').digest('hex'),\n  );\n}\n\nasync function createFromTemplate({\n  projectName,\n  templateUri,\n  npm,\n  pm,\n  directory,\n  projectTitle,\n  skipInstall,\n  packageName,\n  installCocoaPods,\n}: TemplateOptions) {\n  logger.debug('Initializing new project');\n  logger.log(banner);\n\n  let packageManager = pm;\n\n  if (pm) {\n    packageManager = pm;\n  } else {\n    const userAgentPM = userAgentPackageManager();\n    // if possible, use the package manager from the user agent. Otherwise fallback to default (yarn)\n    packageManager = userAgentPM || 'yarn';\n  }\n\n  if (npm) {\n    logger.warn(\n      'Flag --npm is deprecated and will be removed soon. In the future, please use --pm npm instead.',\n    );\n\n    packageManager = 'npm';\n  }\n\n  const projectDirectory = await setProjectDirectory(directory);\n\n  const loader = getLoader({text: 'Downloading template'});\n  const templateSourceDir = fs.mkdtempSync(\n    path.join(os.tmpdir(), 'rncli-init-template-'),\n  );\n\n  try {\n    loader.start();\n\n    await installTemplatePackage(\n      templateUri,\n      templateSourceDir,\n      packageManager,\n    );\n\n    loader.succeed();\n    loader.start('Copying template');\n\n    const templateName = getTemplateName(templateSourceDir);\n    const templateConfig = getTemplateConfig(templateName, templateSourceDir);\n    await copyTemplate(\n      templateName,\n      templateConfig.templateDir,\n      templateSourceDir,\n    );\n\n    loader.succeed();\n    loader.start('Processing template');\n\n    await changePlaceholderInTemplate({\n      projectName,\n      projectTitle,\n      placeholderName: templateConfig.placeholderName,\n      placeholderTitle: templateConfig.titlePlaceholder,\n      packageName,\n    });\n\n    createDefaultConfigFile(projectDirectory, loader);\n\n    const {postInitScript} = templateConfig;\n    if (postInitScript) {\n      loader.info('Executing post init script ');\n      await executePostInitScript(\n        templateName,\n        postInitScript,\n        templateSourceDir,\n      );\n    }\n\n    if (!skipInstall) {\n      await installDependencies({\n        packageManager,\n        loader,\n        root: projectDirectory,\n      });\n\n      if (process.platform === 'darwin') {\n        const installPodsValue = String(installCocoaPods);\n\n        if (installPodsValue === 'true') {\n          await installPods(loader);\n          loader.succeed();\n          setEmptyHashForCachedDependencies(projectName);\n        } else if (installPodsValue === 'undefined') {\n          const {installCocoapods} = await prompt({\n            type: 'confirm',\n            name: 'installCocoapods',\n            message: `Do you want to install CocoaPods now? ${chalk.reset.dim(\n              'Only needed if you run your project in Xcode directly',\n            )}`,\n          });\n\n          if (installCocoapods) {\n            await installPods(loader);\n            loader.succeed();\n            setEmptyHashForCachedDependencies(projectName);\n          }\n        }\n      }\n    } else {\n      loader.succeed('Dependencies installation skipped');\n    }\n  } catch (e) {\n    loader.fail();\n    throw e;\n  } finally {\n    fs.removeSync(templateSourceDir);\n  }\n}\n\nasync function installDependencies({\n  packageManager,\n  loader,\n  root,\n}: {\n  packageManager: PackageManager.PackageManager;\n  loader: Loader;\n  root: string;\n}) {\n  loader.start('Installing dependencies');\n\n  await PackageManager.installAll({\n    packageManager,\n    silent: true,\n    root,\n  });\n\n  loader.succeed();\n}\n\nfunction checkPackageManagerAvailability(\n  packageManager: PackageManager.PackageManager,\n) {\n  if (packageManager === 'bun') {\n    return getBunVersionIfAvailable();\n  } else if (packageManager === 'npm') {\n    return getNpmVersionIfAvailable();\n  } else if (packageManager === 'yarn') {\n    return getYarnVersionIfAvailable();\n  }\n\n  return false;\n}\n\nfunction createTemplateUri(options: Options, version: string): string {\n  const isTypescriptTemplate =\n    options.template === 'react-native-template-typescript';\n\n  // This allows to correctly retrieve template uri for out of tree platforms.\n  const platform = options.platformName || 'react-native';\n\n  if (isTypescriptTemplate) {\n    logger.warn(\n      \"Ignoring custom template: 'react-native-template-typescript'. Starting from React Native v0.71 TypeScript is used by default.\",\n    );\n    return platform;\n  }\n\n  return options.template || `${platform}@${version}`;\n}\n\n//remove quotes from object keys to match the linter rules of the template\nfunction sanitizeConfigFile(fileContent: string) {\n  return fileContent.replace(/\"([^\"]+)\":/g, '$1:');\n}\n\n/*\nStarting from 0.73, react-native.config.js is created by CLI during the init process.\nIt contains automaticPodsInstallation flag set to true by default.\nThis flag is used by CLI to determine whether to install CocoaPods dependencies when running ios commands or not.\nIt's created by CLI rather than being a part of a template to avoid displaying this file in the Upgrade Helper,\nas it might bring confusion for existing projects where this change might not be applicable.\nFor more details, see https://github.com/react-native-community/cli/blob/main/docs/projects.md#projectiosautomaticpodsinstallation\n*/\nfunction createDefaultConfigFile(directory: string, loader: Loader) {\n  const cliConfigContent = {\n    project: {\n      ios: {\n        automaticPodsInstallation: true,\n      },\n    },\n  };\n  const configFileContent = `module.exports = ${JSON.stringify(\n    cliConfigContent,\n    null,\n    2,\n  )}`;\n  const filepath = 'react-native.config.js';\n  try {\n    if (!doesDirectoryExist(path.join(directory, filepath))) {\n      fs.writeFileSync(filepath, sanitizeConfigFile(configFileContent), {\n        encoding: 'utf-8',\n      });\n    } else {\n      const existingConfigFile = require(path.join(directory, filepath));\n\n      const mergedConfig = deepmerge(existingConfigFile, cliConfigContent);\n      const output = `module.exports = ${JSON.stringify(\n        mergedConfig,\n        null,\n        2,\n      )};`;\n\n      fs.writeFileSync(filepath, sanitizeConfigFile(output), {\n        encoding: 'utf-8',\n      });\n    }\n    loader.succeed();\n  } catch {\n    loader.warn(\n      `Could not create custom ${chalk.bold(\n        'react-native.config.js',\n      )} file. You can create it manually in your project's root folder with the following content: \\n\\n${configFileContent}`,\n    );\n  }\n}\n\nasync function createProject(\n  projectName: string,\n  directory: string,\n  version: string,\n  options: Options,\n) {\n  const templateUri = createTemplateUri(options, version);\n\n  return createFromTemplate({\n    projectName,\n    templateUri,\n    npm: options.npm,\n    pm: options.pm,\n    directory,\n    projectTitle: options.title,\n    skipInstall: options.skipInstall,\n    packageName: options.packageName,\n    installCocoaPods: options.installPods,\n  });\n}\n\nfunction userAgentPackageManager() {\n  const userAgent = process.env.npm_config_user_agent;\n\n  if (userAgent) {\n    if (userAgent.startsWith('yarn')) {\n      return 'yarn';\n    }\n    if (userAgent.startsWith('npm')) {\n      return 'npm';\n    }\n    if (userAgent.startsWith('bun')) {\n      return 'bun';\n    }\n  }\n\n  return null;\n}\n\nexport default (async function initialize(\n  [projectName]: Array<string>,\n  options: Options,\n) {\n  if (!projectName) {\n    const {projName} = await prompt({\n      type: 'text',\n      name: 'projName',\n      message: 'How would you like to name the app?',\n    });\n    projectName = projName;\n  }\n\n  validateProjectName(projectName);\n\n  if (!!options.template && !!options.version) {\n    throw new TemplateAndVersionError(options.template);\n  }\n\n  const root = process.cwd();\n  const version = options.version || DEFAULT_VERSION;\n  const directoryName = path.relative(root, options.directory || projectName);\n\n  if (options.pm && !checkPackageManagerAvailability(options.pm)) {\n    logger.error(\n      'Seems like the package manager you want to use is not installed. Please install it or choose another package manager.',\n    );\n    return;\n  }\n\n  await createProject(projectName, directoryName, version, options);\n\n  const projectFolder = path.join(root, directoryName);\n\n  await createGitRepository(projectFolder);\n  printRunInstructions(projectFolder, projectName);\n});\n"],"mappings":"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"}