var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useState, useRef, useEffect } from 'react';
import { useSpring, useTransition, animated, config } from '@react-spring/web';
function TextTransition(props) {
    var _a = props.direction, direction = _a === void 0 ? 'up' : _a, _b = props.inline, inline = _b === void 0 ? false : _b, _c = props.springConfig, springConfig = _c === void 0 ? config.default : _c, _d = props.delay, delay = _d === void 0 ? 0 : _d, className = props.className, style = props.style, _e = props.translateValue, tv = _e === void 0 ? '100%' : _e, children = props.children;
    var initialRun = useRef(true);
    var fromTransform = direction === 'down' ? "-".concat(tv) : tv;
    var leaveTransform = direction === 'down' ? tv : "-".concat(tv);
    var transitions = useTransition([children], {
        enter: { opacity: 1, transform: 'translateY(0%)' },
        from: { opacity: 0, transform: "translateY(".concat(fromTransform, ")") },
        leave: {
            opacity: 0,
            transform: "translateY(".concat(leaveTransform, ")"),
            position: 'absolute',
        },
        config: springConfig,
        immediate: initialRun.current,
        delay: !initialRun.current ? delay : undefined,
    });
    var _f = useState(0), width = _f[0], setWidth = _f[1];
    var currentRef = useRef(null);
    var heightRef = useRef('auto');
    useEffect(function () {
        initialRun.current = false;
        var element = currentRef.current;
        if (!element)
            return;
        var _a = element.getBoundingClientRect(), width = _a.width, height = _a.height;
        setWidth(width);
        heightRef.current = height;
    }, [children, setWidth, currentRef]);
    var widthTransition = useSpring({
        to: { width: width },
        config: springConfig,
        immediate: initialRun.current,
        delay: !initialRun.current ? delay : undefined,
    });
    return (React.createElement(animated.div, { className: "text-transition ".concat(className), style: __assign(__assign(__assign({}, (inline && !initialRun.current ? widthTransition : undefined)), style), { whiteSpace: inline ? 'nowrap' : 'normal', display: inline ? 'inline-flex' : 'flex', height: heightRef.current }) }, transitions(function (styles, item) { return (React.createElement(animated.div, { style: __assign({}, styles), ref: item === children ? currentRef : undefined, children: item })); })));
}
export default TextTransition;
//# sourceMappingURL=TextTransition.js.map