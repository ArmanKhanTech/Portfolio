import {
  animated,
  config,
  useSpring,
  useTransition
} from "./chunk-HD3EKMQ5.js";
import "./chunk-FXQPI6ME.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/react-text-transition/lib-esm/components/TextTransition.js
var import_react = __toESM(require_react());
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function TextTransition(props) {
  var _a = props.direction, direction = _a === void 0 ? "up" : _a, _b = props.inline, inline = _b === void 0 ? false : _b, _c = props.springConfig, springConfig = _c === void 0 ? config.default : _c, _d = props.delay, delay = _d === void 0 ? 0 : _d, className = props.className, style = props.style, _e = props.translateValue, tv = _e === void 0 ? "100%" : _e, children = props.children;
  var initialRun = (0, import_react.useRef)(true);
  var fromTransform = direction === "down" ? "-".concat(tv) : tv;
  var leaveTransform = direction === "down" ? tv : "-".concat(tv);
  var transitions = useTransition([children], {
    enter: { opacity: 1, transform: "translateY(0%)" },
    from: { opacity: 0, transform: "translateY(".concat(fromTransform, ")") },
    leave: {
      opacity: 0,
      transform: "translateY(".concat(leaveTransform, ")"),
      position: "absolute"
    },
    config: springConfig,
    immediate: initialRun.current,
    delay: !initialRun.current ? delay : void 0
  });
  var _f = (0, import_react.useState)(0), width = _f[0], setWidth = _f[1];
  var currentRef = (0, import_react.useRef)(null);
  var heightRef = (0, import_react.useRef)("auto");
  (0, import_react.useEffect)(function() {
    initialRun.current = false;
    var element = currentRef.current;
    if (!element)
      return;
    var _a2 = element.getBoundingClientRect(), width2 = _a2.width, height = _a2.height;
    setWidth(width2);
    heightRef.current = height;
  }, [children, setWidth, currentRef]);
  var widthTransition = useSpring({
    to: { width },
    config: springConfig,
    immediate: initialRun.current,
    delay: !initialRun.current ? delay : void 0
  });
  return import_react.default.createElement(animated.div, { className: "text-transition ".concat(className), style: __assign(__assign(__assign({}, inline && !initialRun.current ? widthTransition : void 0), style), { whiteSpace: inline ? "nowrap" : "normal", display: inline ? "inline-flex" : "flex", height: heightRef.current }) }, transitions(function(styles, item) {
    return import_react.default.createElement(animated.div, { style: __assign({}, styles), ref: item === children ? currentRef : void 0, children: item });
  }));
}
var TextTransition_default = TextTransition;

// node_modules/react-text-transition/lib-esm/index.js
var lib_esm_default = TextTransition_default;
export {
  lib_esm_default as default,
  config as presets
};
//# sourceMappingURL=react-text-transition.js.map
