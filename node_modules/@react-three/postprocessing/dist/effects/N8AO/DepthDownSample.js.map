{"version":3,"file":"DepthDownSample.js","sources":["../../../src/effects/N8AO/DepthDownSample.js"],"sourcesContent":["import * as THREE from 'three'\n\nconst DepthDownSample = {\n  uniforms: {\n    sceneDepth: { value: null },\n    resolution: { value: new THREE.Vector2() },\n    near: { value: 0.1 },\n    far: { value: 1000.0 },\n    viewMatrixInv: { value: new THREE.Matrix4() },\n    projectionMatrixInv: { value: new THREE.Matrix4() },\n    logDepth: { value: false },\n  },\n  depthWrite: false,\n  depthTest: false,\n\n  vertexShader: /* glsl */ `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 1);\n    }`,\n  fragmentShader: /* glsl */ `\n    uniform highp sampler2D sceneDepth;\n    uniform vec2 resolution;\n    uniform float near;\n    uniform float far;\n    uniform bool logDepth;\n    uniform mat4 viewMatrixInv;\n    uniform mat4 projectionMatrixInv;\n    varying vec2 vUv;\n    layout(location = 1) out vec4 gNormal;\n    vec3 getWorldPosLog(vec3 posS) {\n        vec2 uv = posS.xy;\n        float z = posS.z;\n        float nearZ =near;\n        float farZ = far;\n        float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n        float a = farZ / (farZ - nearZ);\n        float b = farZ * nearZ / (nearZ - farZ);\n        float linDepth = a + b / depth;\n        vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n        vec4 wpos = projectionMatrixInv * clipVec;\n        return wpos.xyz / wpos.w;\n      }\n      vec3 getWorldPos(float depth, vec2 coord) {\n        if (logDepth) {\n          return getWorldPosLog(vec3(coord, depth));\n        }\n        float z = depth * 2.0 - 1.0;\n        vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n        vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n        // Perspective division\n       vec4 worldSpacePosition = viewSpacePosition;\n       worldSpacePosition.xyz /= worldSpacePosition.w;\n        return worldSpacePosition.xyz;\n    }\n  \n    vec3 computeNormal(vec3 worldPos, vec2 vUv) {\n      ivec2 p = ivec2(vUv * resolution);\n      float c0 = texelFetch(sceneDepth, p, 0).x;\n      float l2 = texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n      float l1 = texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n      float r1 = texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n      float r2 = texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n      float b2 = texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n      float b1 = texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n      float t1 = texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n      float t2 = texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n  \n      float dl = abs((2.0 * l1 - l2) - c0);\n      float dr = abs((2.0 * r1 - r2) - c0);\n      float db = abs((2.0 * b1 - b2) - c0);\n      float dt = abs((2.0 * t1 - t2) - c0);\n  \n      vec3 ce = getWorldPos(c0, vUv).xyz;\n  \n      vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / resolution.x, 0.0))).xyz\n                            : -ce + getWorldPos(r1, (vUv + vec2(1.0 / resolution.x, 0.0))).xyz;\n      vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / resolution.y))).xyz\n                            : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / resolution.y))).xyz;\n  \n      return normalize(cross(dpdx, dpdy));\n  }\n    void main() {\n        vec2 uv = vUv - vec2(0.5) / resolution;\n        vec2 pixelSize = vec2(1.0) / resolution;\n        vec2[] uvSamples = vec2[4](\n            uv,\n            uv + vec2(pixelSize.x, 0.0),\n            uv + vec2(0.0, pixelSize.y),\n            uv + pixelSize\n        );\n        float depth00 = texture2D(sceneDepth, uvSamples[0]).r;\n        float depth10 = texture2D(sceneDepth, uvSamples[1]).r;\n        float depth01 = texture2D(sceneDepth, uvSamples[2]).r;\n        float depth11 = texture2D(sceneDepth, uvSamples[3]).r;\n        float minDepth = min(min(depth00, depth10), min(depth01, depth11));\n        float maxDepth = max(max(depth00, depth10), max(depth01, depth11));\n        float targetDepth = minDepth;\n        // Checkerboard pattern to avoid artifacts\n        if (mod(gl_FragCoord.x + gl_FragCoord.y, 2.0) > 0.5) { \n            targetDepth = maxDepth;\n        }\n        int chosenIndex = 0;\n        float[] samples = float[4](depth00, depth10, depth01, depth11);\n        for(int i = 0; i < 4; ++i) {\n            if (samples[i] == targetDepth) {\n                chosenIndex = i;\n                break;\n            }\n        }\n        gl_FragColor = vec4(samples[chosenIndex], 0.0, 0.0, 1.0);\n        gNormal = vec4(computeNormal(\n            getWorldPos(samples[chosenIndex], uvSamples[chosenIndex]), uvSamples[chosenIndex]\n        ), 0.0);\n       /* float[] samples = float[4](depth00, depth10, depth01, depth11);\n        float c = 0.25 * (depth00 + depth10 + depth01 + depth11);\n        float[] distances = float[4](depth00, depth10, depth01, depth11);\n        float maxDistance = max(max(distances[0], distances[1]), max(distances[2], distances[3]));\n\n        int remaining[3];\n        int rejected[3];\n        int i, j, k;\n\n        for(i = 0, j = 0, k = 0; i < 4; ++i) {\n            if (distances[i] < maxDistance) {\n                remaining[j++] = i;\n            } else {\n                rejected[k++] = i;\n            }\n        }\n        for(;j < 3;++j) {\n            remaining[j] = rejected[--k];\n        }\n        vec3 s = vec3(\n            samples[remaining[0]],\n            samples[remaining[1]],\n            samples[remaining[2]]\n        );\n        c = (s.x + s.y + s.z) / 3.0;\n\n        distances[0] = abs(c - s.x);\n        distances[1] = abs(c - s.y);\n        distances[2] = abs(c - s.z);\n\n        float minDistance = min(min(distances[0], distances[1]), distances[2]);\n\n        for(i = 0; i < 3; ++i) {\n            if (distances[i] == minDistance) {\n                break;\n            }\n        }*/\n      /*  gl_FragColor = vec4(samples[remaining[i]], 0.0, 0.0, 0.0);\n        gNormal = vec4(computeNormal(\n            getWorldPos(samples[remaining[i]], uvSamples[remaining[i]]), uvSamples[remaining[i]]\n        ), 0.0);*/\n    }`,\n}\n\nexport { DepthDownSample }\n"],"names":[],"mappings":";AAEK,MAAC,kBAAkB;AAAA,EACtB,UAAU;AAAA,IACR,YAAY,EAAE,OAAO,KAAM;AAAA,IAC3B,YAAY,EAAE,OAAO,IAAI,MAAM,QAAO,EAAI;AAAA,IAC1C,MAAM,EAAE,OAAO,IAAK;AAAA,IACpB,KAAK,EAAE,OAAO,IAAQ;AAAA,IACtB,eAAe,EAAE,OAAO,IAAI,MAAM,QAAO,EAAI;AAAA,IAC7C,qBAAqB,EAAE,OAAO,IAAI,MAAM,QAAO,EAAI;AAAA,IACnD,UAAU,EAAE,OAAO,MAAO;AAAA,EAC3B;AAAA,EACD,YAAY;AAAA,EACZ,WAAW;AAAA,EAEX;AAAA;AAAA,IAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzwI7B;"}