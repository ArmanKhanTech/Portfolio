{"version":3,"file":"ToneMapping.js","sources":["../../src/effects/ToneMapping.tsx"],"sourcesContent":["import { ToneMappingEffect, EffectAttribute } from 'postprocessing'\nimport { EffectProps } from '../util'\nimport { forwardRef, useEffect, useMemo } from 'react'\n\nexport type ToneMappingProps = EffectProps<typeof ToneMappingEffect>\n\nexport const ToneMapping = forwardRef<ToneMappingEffect, ToneMappingProps>(function ToneMapping(\n  {\n    blendFunction,\n    adaptive,\n    mode,\n    resolution,\n    maxLuminance,\n    whitePoint,\n    middleGrey,\n    minLuminance,\n    averageLuminance,\n    adaptationRate,\n    ...props\n  },\n  ref\n) {\n  const effect = useMemo(\n    () =>\n      new ToneMappingEffect({\n        blendFunction,\n        adaptive,\n        mode,\n        resolution,\n        maxLuminance,\n        whitePoint,\n        middleGrey,\n        minLuminance,\n        averageLuminance,\n        adaptationRate,\n      }),\n    [\n      blendFunction,\n      adaptive,\n      mode,\n      resolution,\n      maxLuminance,\n      whitePoint,\n      middleGrey,\n      minLuminance,\n      averageLuminance,\n      adaptationRate,\n    ]\n  )\n\n  useEffect(() => {\n    effect.dispose()\n  }, [effect])\n\n  return <primitive {...props} ref={ref} object={effect} attributes={EffectAttribute.CONVOLUTION} />\n})\n"],"names":["ToneMapping"],"mappings":";;;AAMa,MAAA,cAAc,WAAgD,SAASA,aAClF;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GACA,KACA;AACA,QAAM,SAAS;AAAA,IACb,MACE,IAAI,kBAAkB;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,IACH;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAGF,YAAU,MAAM;AACd,WAAO,QAAQ;AAAA,EAAA,GACd,CAAC,MAAM,CAAC;AAEJ,SAAA,oBAAC,eAAW,GAAG,OAAO,KAAU,QAAQ,QAAQ,YAAY,gBAAgB,YAAa,CAAA;AAClG,CAAC;"}