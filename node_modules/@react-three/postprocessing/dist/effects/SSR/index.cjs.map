{"version":3,"file":"index.cjs","sources":["../../../src/effects/SSR/index.tsx"],"sourcesContent":["import React, { Ref, forwardRef, useLayoutEffect, useEffect, useContext, useMemo } from 'react'\n/* @ts-ignore */\nimport { SSREffect } from './screen-space-reflections'\nimport { EffectComposerContext } from '../../EffectComposer'\nimport { selectionContext } from '../../Selection'\nimport { useThree } from '@react-three/fiber'\n\n// first two args are camera and texture\ntype SSRProps = {\n  /** whether you want to use Temporal Resolving to re-use reflections from the last frames; this will reduce noise tremendously but may result in \"smearing\" */\n  temporalResolve?: boolean\n  /** a value between 0 and 1 to set how much the last frame's reflections should be blended in; higher values will result in less noisy reflections when moving the camera but a more smeary look */\n  temporalResolveMix?: number\n  /** a value between 0 and 1 to set how much the reprojected reflection should be corrected; higher values will reduce smearing but will result in less flickering at reflection edges */\n  temporalResolveCorrectionMix?: number\n  /** the maximum number of samples for reflections; settings it to 0 means unlimited samples; setting it to a value like 6 can help make camera movements less disruptive when calculating reflections */\n  maxSamples?: number\n  /** whether to blur the reflections and blend these blurred reflections with the raw ones depending on the blurMix value */\n  ENABLE_BLUR?: boolean\n  /** how much the blurred reflections should be mixed with the raw reflections */\n  blurMix?: number\n  /** the sharpness of the Bilateral Filter used to blur reflections */\n  blurSharpness?: number\n  /** the kernel size of the Bilateral Blur Filter; higher kernel sizes will result in blurrier reflections with more artifacts */\n  blurKernelSize?: number\n  /** how much the reflection ray should travel in each of its iteration; higher values will give deeper reflections but with more artifacts */\n  rayStep?: number\n  /** the intensity of the reflections */\n  intensity?: number\n  /** the maximum roughness a texel can have to have reflections calculated for it */\n  maxRoughness?: number\n  /** whether jittering is enabled; jittering will randomly jitter the reflections resulting in a more noisy but overall more realistic look, enabling jittering can be expensive depending on the view angle */\n  ENABLE_JITTERING?: boolean\n  /** how intense jittering should be */\n  jitter?: number\n  /** how much the jittered rays should be spread; higher values will give a rougher look regarding the reflections but are more expensive to compute with */\n  jitterSpread?: number\n  /** how intense jittering should be in relation to a material's roughness */\n  jitterRough?: number\n  /** the number of steps a reflection ray can maximally do to find an object it intersected (and thus reflects) */\n  MAX_STEPS?: number\n  /** once we had our ray intersect something, we need to find the exact point in space it intersected and thus it reflects; this can be done through binary search with the given number of maximum steps */\n  NUM_BINARY_SEARCH_STEPS?: number\n  /** the maximum depth difference between a ray and the particular depth at its screen position after refining with binary search; lower values will result in better performance */\n  maxDepthDifference?: number\n  /** the maximum depth for which reflections will be calculated */\n  maxDepth?: number\n  /** the maximum depth difference between a ray and the particular depth at its screen position before refining with binary search; lower values will result in better performance */\n  thickness?: number\n  /** Index of Refraction, used for calculating fresnel; reflections tend to be more intense the steeper the angle between them and the viewer is, the ior parameter set how much the intensity varies */\n  ior?: number\n  /** if there should still be reflections for rays for which a reflecting point couldn't be found; enabling this will result in stretched looking reflections which can look good or bad depending on the angle */\n  STRETCH_MISSED_RAYS?: boolean\n  /** WebGL2 only - whether to use multiple render targets when rendering the G-buffers (normals, depth and roughness); using them can improve performance as they will render all information to multiple buffers for each fragment in one run; this setting can't be changed during run-time */\n  USE_MRT?: boolean\n  /** if roughness maps should be taken account of when calculating reflections */\n  USE_ROUGHNESSMAP?: boolean\n  /** if normal maps should be taken account of when calculating reflections */\n  USE_NORMALMAP?: boolean\n}\n\nexport const SSR = forwardRef<SSREffect, SSRProps>(function SSR(\n  { ENABLE_BLUR = true, USE_MRT = true, ...props }: SSRProps,\n\n  ref: Ref<SSREffect>\n) {\n  const { invalidate } = useThree()\n  const { scene, camera } = useContext(EffectComposerContext)\n  const effect = useMemo(\n    () => new SSREffect(scene, camera, { ENABLE_BLUR, USE_MRT, ...props }),\n    [scene, camera, ENABLE_BLUR, USE_MRT, props]\n  )\n\n  const api = useContext(selectionContext)\n  useEffect(() => {\n    if (api && api.enabled) {\n      if (api.selected?.length) {\n        effect.selection.set(api.selected)\n        invalidate()\n        return () => {\n          effect.selection.clear()\n          invalidate()\n        }\n      }\n    }\n  }, [api])\n\n  return <primitive ref={ref} object={effect} {...props} />\n})\n"],"names":["forwardRef","SSR","useThree","useContext","EffectComposerContext","useMemo","SSREffect","selectionContext","useEffect"],"mappings":";;;;;;;;AA6DO,MAAM,MAAMA,MAAA,WAAgC,SAASC,KAC1D,EAAE,cAAc,MAAM,UAAU,MAAM,GAAG,MAAM,GAE/C,KACA;AACM,QAAA,EAAE,eAAeC,MAAAA;AACvB,QAAM,EAAE,OAAO,OAAO,IAAIC,iBAAWC,eAAqB,qBAAA;AAC1D,QAAM,SAASC,MAAA;AAAA,IACb,MAAM,IAAIC,uBAAAA,UAAU,OAAO,QAAQ,EAAE,aAAa,SAAS,GAAG,OAAO;AAAA,IACrE,CAAC,OAAO,QAAQ,aAAa,SAAS,KAAK;AAAA,EAAA;AAGvC,QAAA,MAAMH,iBAAWI,UAAAA,gBAAgB;AACvCC,QAAAA,UAAU,MAAM;;AACV,QAAA,OAAO,IAAI,SAAS;AAClB,WAAA,SAAI,aAAJ,mBAAc,QAAQ;AACjB,eAAA,UAAU,IAAI,IAAI,QAAQ;AACtB;AACX,eAAO,MAAM;AACX,iBAAO,UAAU;AACN;QAAA;AAAA,MAEf;AAAA,IACF;AAAA,EAAA,GACC,CAAC,GAAG,CAAC;AAER,wCAAQ,aAAU,EAAA,KAAU,QAAQ,QAAS,GAAG,MAAO,CAAA;AACzD,CAAC;;"}